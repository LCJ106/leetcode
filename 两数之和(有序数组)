/*
给定一个已按照升序排列的有序数组，找到两个数使得它们相加之和等于目标数。
函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。

说明:
    返回的下标值（index1 和 index2）不是从零开始的。
    你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。

示例:
输入: numbers = [2, 7, 11, 15], target = 9
输出: [1,2]
解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。
*/

//看到有序数组应该想到二分法，二分法时间复杂度O(log(n))，循环遍历一遍，最终时间复杂度O(nlog⁡n)
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int length=numbers.length;
        for(int i=0;i<length;i++){
            int low=i+1,high=length-1,another=target-numbers[i];
            int mid=(low+high)/2;
            while(numbers[mid]!=another){
                if(numbers[mid]>another){
                    high=mid;
                }
                else{
                    low=mid;
                }
                mid=(high+low)/2;
                if(low==high)
                   break;
            }
            if(numbers[mid]==another)
              return new int[]{i+1,mid+1};
        }
        return new int[]{-1,-1};
    }
}
